{"version":3,"sources":["App.js","index.js"],"names":["buttons","clear","divide","multiply","seven","eight","nine","subtract","four","five","six","add","one","two","three","equals","zero","decimal","DisplayInput","className","this","props","value","React","Component","DisplayOutput","id","Button","buttonID","buttonValue","style","onClick","handleClick","defaultState","expression","currentValue","previousValue","isDecimal","isOperator","isZero","operator","evaluated","App","state","evaluate","replace","result","Math","round","eval","setState","toString","e","input","target","isNegative","test","slice","length","script","document","createElement","src","async","body","appendChild","buttonArray","key","button","push","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0f20a7c6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// Layout order\nconst buttons = {\n  clear: 'AC',\n  divide: '/',\n  multiply: 'x',\n  seven: '7',\n  eight: '8',\n  nine: '9',\n  subtract: '-',\n  four: '4',\n  five: '5',\n  six: '6',\n  add: '+',\n  one: '1',\n  two: '2',\n  three: '3',\n  equals: '=',\n  zero: '0',\n  decimal: '.'\n};\n\n// Expression / Input\nclass DisplayInput extends React.Component {\n  render() {\n    return <div className='displayInput'>{this.props.value}</div>;\n  }\n}\n\n// Value / Output\nclass DisplayOutput extends React.Component {\n  render() {\n    return (\n      <div id='display' className='displayOutput'>\n        {this.props.value}\n      </div>\n    );\n  }\n}\n\nclass Button extends React.Component {\n  render() {\n    const id = this.props.buttonID;\n    return (\n      <button\n        id={id}\n        value={this.props.buttonValue}\n        className='button'\n        style={{ 'grid-area': id }}\n        onClick={this.props.handleClick}\n      >\n        {buttons[id]}\n      </button>\n    );\n  }\n}\n\nlet defaultState = {\n  expression: '',\n  currentValue: 0,\n  previousValue: 0,\n  isDecimal: false,\n  isOperator: false,\n  isZero: true,\n  operator: null,\n  evaluated: false\n};\n\nclass App extends React.Component {\n  state = defaultState;\n\n  evaluate = () => {\n    if(!this.state.expression)\n      return;\n\n    let expression = this.state.expression.replace(/x/g, '*');\n\n    // https://www.geeksforgeeks.org/round-off-a-number-upto-2-decimal-place-using-javascript/\n    // Method 2\n    let result = Math.round(eval(expression) * 1000000000000) / 1000000000000;\n    this.setState(state => ({\n      currentValue: result.toString(),\n      previousValue: state.currentValue,\n      evaluated: true\n    }));\n  };\n\n  onClick = e => {\n    let input = e.target.value;\n\n    if (input === 'AC') {\n      // reset\n      this.setState(defaultState);\n      return;\n    } else if (input === '=') {\n      // equals\n      this.evaluate();\n    } else if (input === '0') {\n      // zero\n      if (!this.state.expression) {\n        this.setState(state => ({\n          isZero: false,\n          expression: ''\n        }));\n        return;\n      }\n\n      this.setState(state => ({\n        isZero: true,\n        expression: state.expression + input,\n        currentValue: state.currentValue + input\n      }));\n    } else if (\n      input === '+' ||\n      input === '-' ||\n      input === 'x' ||\n      input === '/'\n    ) {\n      // operator\n      if(!this.state.expression)\n        return;\n\n      if (this.state.evaluated) {\n        this.setState(state => ({\n          expression: state.currentValue\n        }));\n      }\n\n      let isNegative = input === '-';\n\n      if (!this.state.isOperator) {\n        this.setState(state => ({\n          isOperator: true,\n          expression: state.expression + input,\n          currentValue: input,\n          previousValue: state.currentValue,\n          operator: input,\n          isDecimal: false\n        }));\n      } else {\n        if (/[+/x]-$/.test(this.state.expression)) {\n          this.setState({\n            expression:\n              this.state.expression.slice(0, this.state.expression.length - 2) +\n              input\n          });\n        }\n\n        if (isNegative && this.state.operator !== '-') {\n          this.setState(state => ({\n            isOperator: true,\n            expression: state.expression + input,\n            currentValue: input,\n            operator: input,\n            isDecimal: false\n          }));\n          return;\n        }\n\n        if (this.state.operator === '-') {\n          return;\n        }\n\n        this.setState(state => ({\n          isOperator: true,\n          expression:\n            state.expression.slice(0, state.expression.length - 1) + input,\n          currentValue: input,\n          operator: input,\n          isDecimal: false\n        }));\n      }\n    } else if (input === '.') {\n      // decimal\n      !this.state.isDecimal &&\n        this.setState(state => ({\n          isDecimal: true,\n          expression: !state.expression\n            ? '0' + input\n            : state.expression + input,\n          currentValue: state.currentValue + input\n        }));\n    } else {\n      // number\n      if (this.state.expression === '' && this.state.currentValue === 0) {\n        this.setState(state => ({\n          expression: input,\n          currentValue: input\n        }));\n        return;\n      }\n\n      this.setState(state => ({\n        expression: state.expression + input,\n        currentValue:\n          state.isDecimal || !state.isOperator\n            ? state.currentValue + input\n            : input,\n        isOperator: false\n      }));\n    }\n  };\n\n  componentDidMount() {\n    const script = document.createElement('script');\n    script.src =\n      'https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js';\n    script.async = 'true';\n    document.body.appendChild(script);\n  }\n\n  render() {\n    let buttonArray = [];\n    for (let key in buttons) {\n      let button = (\n        <Button\n          key={key}\n          buttonID={key}\n          buttonValue={buttons[key]}\n          handleClick={this.onClick}\n        />\n      );\n      buttonArray.push(button);\n    }\n    return (\n      <div className='container'>\n        <DisplayInput value={this.state.expression} />\n        <DisplayOutput value={this.state.currentValue} />\n        <div className='buttonGrid'>{buttonArray}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}